// <auto-generated />
using System;
using EFCoreDBFirstTest.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCoreDBFirstTest.Migrations
{
    [DbContext(typeof(AdvokathusetContext))]
    [Migration("20210108165428_MyFirstMigration")]
    partial class MyFirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("EFCoreDBFirstTest.Models.AdvArbejdsYdelser", b =>
                {
                    b.Property<int>("YdelseNr")
                        .HasColumnType("int")
                        .HasColumnName("Ydelse_Nr");

                    b.Property<Guid>("AdvId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Adv_ID");

                    b.HasKey("YdelseNr", "AdvId");

                    b.HasIndex("AdvId");

                    b.ToTable("Adv_Arbejds_Ydelser");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.AdvokatUddannelser", b =>
                {
                    b.Property<string>("AdvokatUddanelse")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Advokat_Uddanelse");

                    b.Property<Guid>("MeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Me_ID");

                    b.HasKey("AdvokatUddanelse", "MeId")
                        .HasName("PK_Advokat_Uddannelser_1");

                    b.HasIndex("MeId");

                    b.ToTable("Advokat_Uddannelser");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Kunde", b =>
                {
                    b.Property<Guid>("KundeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Kunde_ID");

                    b.Property<string>("KundeAdresse")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Kunde_Adresse");

                    b.Property<string>("KundeEfternavn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Kunde_Efternavn");

                    b.Property<string>("KundeEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Kunde_Email");

                    b.Property<string>("KundeFornavn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Kunde_Fornavn");

                    b.Property<string>("KundeOpretsDato")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Kunde_Oprets_Dato");

                    b.Property<int>("KundePostNr")
                        .HasColumnType("int")
                        .HasColumnName("Kunde_PostNr");

                    b.HasKey("KundeId");

                    b.HasIndex("KundePostNr");

                    b.ToTable("Kunde");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.KundeTlf", b =>
                {
                    b.Property<int>("KundeTlf1")
                        .HasColumnType("int")
                        .HasColumnName("Kunde_Tlf");

                    b.Property<Guid>("KundeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Kunde_ID");

                    b.HasKey("KundeTlf1", "KundeId");

                    b.HasIndex("KundeId");

                    b.ToTable("Kunde_Tlf");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Kørsel", b =>
                {
                    b.Property<Guid>("KørselId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Kørsel_ID");

                    b.Property<Guid>("AdvokatId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Advokat_ID");

                    b.Property<string>("KørselDato")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Kørsel_Dato");

                    b.Property<string>("KørselNotering")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("Kørsel_Notering");

                    b.Property<decimal>("KørselTid")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Kørsel_Tid");

                    b.Property<Guid>("SagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Sag_ID");

                    b.HasKey("KørselId");

                    b.HasIndex("AdvokatId");

                    b.HasIndex("SagId");

                    b.ToTable("Kørsel");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.LogIn", b =>
                {
                    b.Property<string>("LogInNavn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Log_In_Navn");

                    b.Property<string>("LogInPass")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Log_In_Pass");

                    b.Property<Guid>("MeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Me_ID");

                    b.HasIndex(new[] { "LogInNavn" }, "IX_Log_In")
                        .IsUnique();

                    b.HasIndex(new[] { "MeId" }, "IX_Log_In_1")
                        .IsUnique();

                    b.ToTable("Log_In");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Medarbejder", b =>
                {
                    b.Property<Guid>("MeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Me_ID");

                    b.Property<string>("MeAdresse")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Me_Adresse");

                    b.Property<string>("MeEfternavn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Me_Efternavn");

                    b.Property<string>("MeEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Me_Email");

                    b.Property<string>("MeFornavn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Me_Fornavn");

                    b.Property<string>("MeOpretsDato")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Me_Oprets_Dato");

                    b.Property<int>("MePostNr")
                        .HasColumnType("int")
                        .HasColumnName("Me_PostNr");

                    b.Property<string>("MeType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Me_Type");

                    b.HasKey("MeId")
                        .HasName("PK_Medarbejder_1");

                    b.HasIndex("MePostNr");

                    b.HasIndex("MeType");

                    b.HasIndex(new[] { "MeFornavn" }, "IX_Medarbejder")
                        .IsUnique();

                    b.ToTable("Medarbejder");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.MedarbejderTlf", b =>
                {
                    b.Property<int>("MeTlf")
                        .HasColumnType("int")
                        .HasColumnName("Me_Tlf");

                    b.Property<Guid>("MeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Me_ID");

                    b.HasKey("MeTlf", "MeId");

                    b.HasIndex("MeId");

                    b.ToTable("Medarbejder_Tlf");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.MedarbejderType", b =>
                {
                    b.Property<string>("MeType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Me_Type");

                    b.HasKey("MeType");

                    b.ToTable("Medarbejder_Type");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Post", b =>
                {
                    b.Property<int>("PostNr")
                        .HasColumnType("int");

                    b.Property<string>("Distrikt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PostNr");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Sag", b =>
                {
                    b.Property<Guid>("SagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Sag_ID");

                    b.Property<Guid>("SagAdvokatId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Sag_Advokat_ID");

                    b.Property<bool>("SagAfslutet")
                        .HasColumnType("bit")
                        .HasColumnName("Sag_Afslutet");

                    b.Property<Guid>("SagKundeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Sag_Kunde_ID");

                    b.Property<string>("SagOpretsDato")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Sag_Oprets_Dato");

                    b.Property<string>("SagSlutDato")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Sag_Slut_Dato");

                    b.Property<string>("SagType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Sag_Type");

                    b.HasKey("SagId");

                    b.HasIndex("SagAdvokatId");

                    b.HasIndex("SagKundeId");

                    b.ToTable("Sag");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.SagYdelser", b =>
                {
                    b.Property<Guid>("SagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Sag_ID");

                    b.Property<Guid>("YdelseNr")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Ydelse_Nr");

                    b.Property<string>("SagYdelseOpretsDato")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Sag_Ydelse_Oprets_Dato");

                    b.HasKey("SagId", "YdelseNr");

                    b.HasIndex("YdelseNr");

                    b.ToTable("Sag_Ydelser");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Tid", b =>
                {
                    b.Property<Guid>("TidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Tid_ID");

                    b.Property<Guid>("AdvokatId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Advokat_ID");

                    b.Property<Guid>("SagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Sag_ID");

                    b.Property<decimal>("Tid1")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Tid");

                    b.Property<string>("TidDato")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Tid_Dato");

                    b.Property<Guid>("YdelseNr")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Ydelse_Nr");

                    b.HasKey("TidId");

                    b.HasIndex("AdvokatId");

                    b.HasIndex("SagId", "YdelseNr");

                    b.ToTable("Tid");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.TypeYdelse", b =>
                {
                    b.Property<string>("YdelseType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ydelse_Type");

                    b.HasKey("YdelseType");

                    b.ToTable("Type_Ydelse");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Uddannelser", b =>
                {
                    b.Property<string>("AdvokatUddanelse")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Advokat_Uddanelse");

                    b.HasKey("AdvokatUddanelse")
                        .HasName("PK_Advokat_Udanelser");

                    b.ToTable("Uddannelser");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Ydelse", b =>
                {
                    b.Property<Guid>("YdelseNr")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Ydelse_Nr");

                    b.Property<string>("YdelseArt")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ydelse_Art");

                    b.Property<string>("YdelseNavn")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Ydelse_Navn");

                    b.Property<string>("YdelseOpretsDato")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Ydelse_Oprets_Dato");

                    b.Property<decimal>("YdelsePris")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("Ydelse_Pris");

                    b.Property<string>("YdelseType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ydelse_Type");

                    b.HasKey("YdelseNr");

                    b.HasIndex("YdelseType");

                    b.HasIndex(new[] { "YdelseNavn" }, "IX_Ydelse")
                        .IsUnique();

                    b.ToTable("Ydelse");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.AdvArbejdsYdelser", b =>
                {
                    b.HasOne("EFCoreDBFirstTest.Models.Medarbejder", "Adv")
                        .WithMany("AdvArbejdsYdelsers")
                        .HasForeignKey("AdvId")
                        .HasConstraintName("FK_Adv_Arbejds_Ydelser_Medarbejder")
                        .IsRequired();

                    b.Navigation("Adv");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.AdvokatUddannelser", b =>
                {
                    b.HasOne("EFCoreDBFirstTest.Models.Uddannelser", "AdvokatUddanelseNavigation")
                        .WithMany("AdvokatUddannelsers")
                        .HasForeignKey("AdvokatUddanelse")
                        .HasConstraintName("FK_Advokat_Advokat_Udanelser")
                        .IsRequired();

                    b.HasOne("EFCoreDBFirstTest.Models.Medarbejder", "Me")
                        .WithMany("AdvokatUddannelsers")
                        .HasForeignKey("MeId")
                        .HasConstraintName("FK_Advokat_Uddannelser_Medarbejder")
                        .IsRequired();

                    b.Navigation("AdvokatUddanelseNavigation");

                    b.Navigation("Me");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Kunde", b =>
                {
                    b.HasOne("EFCoreDBFirstTest.Models.Post", "KundePostNrNavigation")
                        .WithMany("Kundes")
                        .HasForeignKey("KundePostNr")
                        .HasConstraintName("FK_Kunde_Post")
                        .IsRequired();

                    b.Navigation("KundePostNrNavigation");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.KundeTlf", b =>
                {
                    b.HasOne("EFCoreDBFirstTest.Models.Kunde", "Kunde")
                        .WithMany("KundeTlves")
                        .HasForeignKey("KundeId")
                        .HasConstraintName("FK_Kunde_Tlf_Kunde1")
                        .IsRequired();

                    b.Navigation("Kunde");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Kørsel", b =>
                {
                    b.HasOne("EFCoreDBFirstTest.Models.Medarbejder", "Advokat")
                        .WithMany("Kørsels")
                        .HasForeignKey("AdvokatId")
                        .HasConstraintName("FK_Kørsel_Medarbejder")
                        .IsRequired();

                    b.HasOne("EFCoreDBFirstTest.Models.Sag", "Sag")
                        .WithMany("Kørsels")
                        .HasForeignKey("SagId")
                        .HasConstraintName("FK_Kørsel_Sag1")
                        .IsRequired();

                    b.Navigation("Advokat");

                    b.Navigation("Sag");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.LogIn", b =>
                {
                    b.HasOne("EFCoreDBFirstTest.Models.Medarbejder", "Me")
                        .WithOne()
                        .HasForeignKey("EFCoreDBFirstTest.Models.LogIn", "MeId")
                        .HasConstraintName("FK_Log_In_Medarbejder")
                        .IsRequired();

                    b.Navigation("Me");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Medarbejder", b =>
                {
                    b.HasOne("EFCoreDBFirstTest.Models.Post", "MePostNrNavigation")
                        .WithMany("Medarbejders")
                        .HasForeignKey("MePostNr")
                        .HasConstraintName("FK_Medarbejder_Post")
                        .IsRequired();

                    b.HasOne("EFCoreDBFirstTest.Models.MedarbejderType", "MeTypeNavigation")
                        .WithMany("Medarbejders")
                        .HasForeignKey("MeType")
                        .HasConstraintName("FK_Medarbejder_Medarbejder_Type")
                        .IsRequired();

                    b.Navigation("MePostNrNavigation");

                    b.Navigation("MeTypeNavigation");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.MedarbejderTlf", b =>
                {
                    b.HasOne("EFCoreDBFirstTest.Models.Medarbejder", "Me")
                        .WithMany("MedarbejderTlves")
                        .HasForeignKey("MeId")
                        .HasConstraintName("FK_Medarbejder_Tlf_Medarbejder1")
                        .IsRequired();

                    b.Navigation("Me");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Sag", b =>
                {
                    b.HasOne("EFCoreDBFirstTest.Models.Medarbejder", "SagAdvokat")
                        .WithMany("Sags")
                        .HasForeignKey("SagAdvokatId")
                        .HasConstraintName("FK_Sag_Medarbejder")
                        .IsRequired();

                    b.HasOne("EFCoreDBFirstTest.Models.Kunde", "SagKunde")
                        .WithMany("Sags")
                        .HasForeignKey("SagKundeId")
                        .HasConstraintName("FK_Sag_Kunde")
                        .IsRequired();

                    b.Navigation("SagAdvokat");

                    b.Navigation("SagKunde");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.SagYdelser", b =>
                {
                    b.HasOne("EFCoreDBFirstTest.Models.Sag", "Sag")
                        .WithMany("SagYdelsers")
                        .HasForeignKey("SagId")
                        .HasConstraintName("FK_Sag_Ydelser_Sag1")
                        .IsRequired();

                    b.HasOne("EFCoreDBFirstTest.Models.Ydelse", "YdelseNrNavigation")
                        .WithMany("SagYdelsers")
                        .HasForeignKey("YdelseNr")
                        .HasConstraintName("FK_Sag_Ydelser_Ydelse")
                        .IsRequired();

                    b.Navigation("Sag");

                    b.Navigation("YdelseNrNavigation");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Tid", b =>
                {
                    b.HasOne("EFCoreDBFirstTest.Models.Medarbejder", "Advokat")
                        .WithMany("Tids")
                        .HasForeignKey("AdvokatId")
                        .HasConstraintName("FK_Tid_Medarbejder")
                        .IsRequired();

                    b.HasOne("EFCoreDBFirstTest.Models.Sag", "Sag")
                        .WithMany("Tids")
                        .HasForeignKey("SagId")
                        .HasConstraintName("FK_Tid_Sag1")
                        .IsRequired();

                    b.HasOne("EFCoreDBFirstTest.Models.SagYdelser", "SagYdelser")
                        .WithMany("Tids")
                        .HasForeignKey("SagId", "YdelseNr")
                        .HasConstraintName("FK_Tid_Sag_Ydelser")
                        .IsRequired();

                    b.Navigation("Advokat");

                    b.Navigation("Sag");

                    b.Navigation("SagYdelser");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Ydelse", b =>
                {
                    b.HasOne("EFCoreDBFirstTest.Models.TypeYdelse", "YdelseTypeNavigation")
                        .WithMany("Ydelses")
                        .HasForeignKey("YdelseType")
                        .HasConstraintName("FK_Ydelse_Type_Ydelse")
                        .IsRequired();

                    b.Navigation("YdelseTypeNavigation");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Kunde", b =>
                {
                    b.Navigation("KundeTlves");

                    b.Navigation("Sags");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Medarbejder", b =>
                {
                    b.Navigation("AdvArbejdsYdelsers");

                    b.Navigation("AdvokatUddannelsers");

                    b.Navigation("Kørsels");

                    b.Navigation("MedarbejderTlves");

                    b.Navigation("Sags");

                    b.Navigation("Tids");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.MedarbejderType", b =>
                {
                    b.Navigation("Medarbejders");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Post", b =>
                {
                    b.Navigation("Kundes");

                    b.Navigation("Medarbejders");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Sag", b =>
                {
                    b.Navigation("Kørsels");

                    b.Navigation("SagYdelsers");

                    b.Navigation("Tids");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.SagYdelser", b =>
                {
                    b.Navigation("Tids");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.TypeYdelse", b =>
                {
                    b.Navigation("Ydelses");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Uddannelser", b =>
                {
                    b.Navigation("AdvokatUddannelsers");
                });

            modelBuilder.Entity("EFCoreDBFirstTest.Models.Ydelse", b =>
                {
                    b.Navigation("SagYdelsers");
                });
#pragma warning restore 612, 618
        }
    }
}
